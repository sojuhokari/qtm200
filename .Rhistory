upper <- xbar + criticalt * s / sqrt(n)
s <- sd(y)
lower <- xbar - criticalt * s / sqrt(n)
upper <- xbar + criticalt * s / sqrt(n)
alpha <- 0.05
t.test(y, alternative = "two.sided", mu = n - 1, conf.level = 1 - alpha)
t.test(y, alternative = "two.sided", mu = 100, conf.level = 1 - alpha)
t.test(y, alternative = "one.sided", mu = 100, conf.level = 1 - alpha)
t.test(y, alternative = "greater", mu = 100, conf.level = 1 - alpha)
t.test(y, alternative = "less", mu = 100, conf.level = 1 - alpha)
t.test(y, mu = 100, conf.level = 1 - alpha)
t.test(y, mu = 100, conf.level = 0.95)
t.test(y, mu = 100, conf.level = 0.9)
t.test(y, mu = 100, conf.level = 0.5)
t.test(y, mu = 100, conf.level = 0.99999)
t.test(y, mu = 100, conf.level = 0.95)
t.test(y, mu = 100, conf.level = 0.95)
results <- t.test(y, mu = 100, conf.level = 0.95)
t.test(y, mu = 100, conf.level = 0.95)
results <- t.test(y, alternative = "greater", mu = 100, conf.level = 0.95)
results
results[p.value]
results.p.value
results$p.value
expenditure <- read.table("datasets/expenditure.txt",header=T)
summary(expenditure)
expenditure$Region <- factor(expenditure$Region, levels = c("Northeast", "North Central", "South", "West"))
expenditure <- read.table("datasets/expenditure.txt", header=T)
expenditure$Region <- factor(expenditure$Region, levels = c("Northeast", "North Central", "South", "West"))
expenditure <- read.table("datasets/expenditure.txt", header=T)
expenditure$Region <- factor(expenditure$Region, labels = c("Northeast", "North Central", "South", "West"))
expenditure$Region
expenditure$Region <- factor(expenditure$Region, levels = c(1, 2, 3, 4), labels = c("Northeast", "North Central", "South", "West"))
summary(expenditure)
expenditure$Region <- factor(expenditure$Region, levels = c("Northeast", "North Central", "South", "West"))
summary(expenditure)
expenditure$Region <- factor(expenditure$Region, labels = c("Northeast", "North Central", "South", "West"))
expenditure <- read.table("datasets/expenditure.txt", header=T)
expenditure$Region <- factor(expenditure$Region, levels = c("Northeast", "North Central", "South", "West"))
summary(expenditure)
expenditure <- read.table("datasets/expenditure.txt", header=T)
expenditure$Region <- factor(expenditure$Region, labels = c("Northeast", "North Central", "South", "West"))
summary(expenditure)
expenditure <- read.table("datasets/expenditure.txt", header=T)
expenditure$Region
expenditure$Region <- factor(expenditure$Region, labels = c("Northeast", "North Central", "South", "West"))
summary(expenditure)
# Here you load the necessary packages.
library("ggplot2")
+ geom_point(aes(x = X1, y = Y))
ggplot(expenditure)
ggplot(expenditure) +
geom_point(aes(x = X1, y = Y))
ggplot(expenditure) +
geom_point(aes(x = X1, y = Y)) +
xlab("per capita personal income") +
ylab("per capita expenditure on public education")
ggplot(expenditure) +
geom_point(aes(x = X1, y = Y, size - X2, color = X3)) +
xlab("per capita personal income") +
ylab("per capita expenditure on public education")
ggplot(expenditure) +
geom_point(aes(x = X1, y = Y, size = X2, color = X3)) +
xlab("per capita personal income") +
ylab("per capita expenditure on public education")
ggplot(expenditure) +
geom_point(aes(x = X1, y = Y, size = X2, color = X3)) +
xlab("per capita personal income") +
ylab("per capita expenditure on public education") +
labs(size = "Number of residents per thousand under 18 years of age", color = "Number of people per thousand residing in urban areas")
ggplot(expenditure) +
geom_point(aes(x = X2, y = Y)) +
xlab("Number of residents per thousand under 18 years of age") +
ylab("Per capita expenditure on public education")
ggplot(expenditure) +
geom_point(aes(x = X3, y = Y)) +
xlab("Number of people per thousand residing in urban areas") +
ylab("Per capita expenditure on public education")
### Question 4: Write your code in the code chunk and your text answer after the code chunk.
boxplot(expenditure$Y ~ expenditure$Region)
results <- t.test(expenditure$Y[expenditure$Region == "West"], alternative = "two.sided", mu = 100, conf.level = 0.95)
ggplot(expenditure) +
geom_point(aes(x = X1, y = Y, color = Region)) +
xlab("Per capita personal income") +
ylab("Per capita expenditure on public education") +
labs(color = "Region")
ggplot(expenditure) +
geom_point(aes(x = X1, y = Y, color = Region, point = Region)) +
xlab("Per capita personal income") +
ylab("Per capita expenditure on public education") +
labs(color = "Region")
ggplot(expenditure) +
geom_point(aes(x = X1, y = Y, color = Region, type = Region)) +
xlab("Per capita personal income") +
ylab("Per capita expenditure on public education") +
labs(color = "Region")
ggplot(expenditure) +
geom_point(aes(x = X1, y = Y, color = Region, shape = Region)) +
xlab("Per capita personal income") +
ylab("Per capita expenditure on public education") +
labs(color = "Region")
knitr::opts_chunk$set(echo = TRUE)
# Here you load the necessary packages.
library("ggplot2")
# Here you enter your name: Soju Hokari - It won't show in the .html file but show in the .rmd file.
y <- c(1,2,1,3,4,1,1,4,2,1,3,4,3,2,1,3,4,1,2,3,1,1,2,1,1,3,4)
y[y == 1] <- "Freshman"
y[y == 2] <- "Sophomore"
y[y == 3] <- "Junior"
y[y == 4] <- "Senior"
y <- c(105,69,86,100,82,111,104,110,87,108,87,90,94,113,112,98,80,97,95,111,114,89,95,126,98)
xbar <- mean(y)
n <- length(y)
s <- sd(y)
# 90% conf. int., so we set alpha to 0.1
alpha <- 0.1
criticalt <- qt(alpha/2, n-1, lower.tail = F)
lower <- xbar - criticalt * s / sqrt(n)
upper <- xbar + criticalt * s / sqrt(n)
# H0: average IQ in the school is higher than 100
# Ha: average IQ in the school is not higher than 100
results <- t.test(y, alternative = "greater", mu = 100, conf.level = 0.95)
# Import `expenditure` data set; clean it up a little
expenditure <- read.table("datasets/expenditure.txt", header=T)
expenditure$Region <- factor(expenditure$Region, labels = c("Northeast", "North Central", "South", "West"))
summary(expenditure)
ggplot(expenditure) +
geom_point(aes(x = X1, y = Y, size = X2, color = X3)) +
xlab("Per capita personal income") +
ylab("Per capita expenditure on public education") +
labs(size = "Number of residents per thousand under 18 years of age", color = "Number of people per thousand residing in urban areas")
ggplot(expenditure) +
geom_point(aes(x = X2, y = Y)) +
xlab("Number of residents per thousand under 18 years of age") +
ylab("Per capita expenditure on public education")
ggplot(expenditure) +
geom_point(aes(x = X3, y = Y)) +
xlab("Number of people per thousand residing in urban areas") +
ylab("Per capita expenditure on public education")
boxplot(expenditure$Y ~ expenditure$Region)
results <- t.test(expenditure$Y[expenditure$Region == "West"], alternative = "two.sided", mu = 100, conf.level = 0.95)
ggplot(expenditure) +
geom_point(aes(x = X1, y = Y, color = Region, shape = Region)) +
xlab("Per capita personal income") +
ylab("Per capita expenditure on public education") +
labs(color = "Region")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
```{r}
library(car)
library(carData)
library(tidyverse)
summary(Duncan)
# Find the critical t value/t score
qt(0.025, df=43, lower.tail = F) # df in SLR: n-2
y<-Duncan$prestige
x<-Duncan$income
lm<-lm(y~x)
summary(lm)
names(lm)
lm$coefficients
lm$coefficients[2]
tteststatistic <- (lm$coefficients[2] - 2)/0.1074
lm$coefficients[2]
tteststatistic <- (lm$coefficients[2] - 2)/0.1074 #(beta_1_hat - beta_1) / SE_beta_1_hat
pvalue<-2*pt(tteststatistic, 43, lower.tail = T)
pvalue
tteststatistic
pvalue<-2*pt(tteststatistic, 43, lower.tail = T)
pvalue
#method 1
qt(0.025,43,lower.tail = F)
tteststatistic
#method 1
c<-qt(0.025,43,lower.tail = F)
U<-lm$coefficients[2] + c * 0.1074
L<-lm$coefficients[2] + c * 0.1074
U
L
U
L
L<-lm$coefficients[2] - c * 0.1074
U
L
#method 2
confint(lm, level = 0.9)
#method 2
confint(lm, level = 0.95)
#method 2
confint(lm, level = 0.9)
summary(lm)
linearHypothesis(lm, "x=2")
pvalue
predict(lm(y~x), newdata = data.frame(x=50), se.fit = TRUE, interval = "confidence") # predict(regression, newdata=newdata, se.fit = TRUE [bc we want to know the SE of the predicted value], interval = "confidence")
# Predict an individual Y given x = 50
predict(lm(y~x), newdata = data.frame(x=50), se.fit = TRUE, interval = "prediction")
# generate predicted y values at multiple x variables
new<-data.frame(x=seq(10,90,5))
prep.m<-predict(lm(y~x), newdata = new, interval = "confidence")
prep.m
prep.p<-predict(lm(y~x), newdata = new,  interval = "prediction")
prep.p
cbind(prep.m, prep.p)
matplot(new$x, cbind(prep.m, prep.p[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
# Predict mean Y given x = 50
predict(lm(y~x), newdata = data.frame(x=50), se.fit = TRUE, interval = "confidence") # predict(regression, newdata=newdata, se.fit = TRUE [bc we want to know the SE of the predicted value], interval = "confidence")
# Predict an individual Y given x = 50
predict(lm(y~x), newdata = data.frame(x=50), se.fit = TRUE, interval = "prediction")
# generate predicted y values at multiple x variables
new<-data.frame(x=seq(10,90,5)) # seq() generates numbers from 10 to 90 by increments of 5
prep.m<-predict(lm(y~x), newdata = new, interval = "confidence")
prep.m
prep.p<-predict(lm(y~x), newdata = new,  interval = "prediction")
prep.p
cbind(prep.m, prep.p)
matplot(new$x, cbind(prep.m, prep.p[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
# Predict mean Y given x = 50
predict(lm(y~x), newdata = data.frame(x=50), se.fit = TRUE, interval = "confidence") # predict(regression, newdata=newdata, se.fit = TRUE [bc we want to know the SE of the predicted value], interval = "confidence")
# Predict an individual Y given x = 50
predict(lm(y~x), newdata = data.frame(x=50), se.fit = TRUE, interval = "prediction")
# generate predicted y values at multiple x variables
new<-data.frame(x=seq(10,90,5)) # seq() generates numbers from 10 to 90 by increments of 5
prep.m<-predict(lm(y~x), newdata = new, interval = "confidence")
prep.m
prep.p<-predict(lm(y~x), newdata = new,  interval = "prediction")
prep.p
cbind(prep.m, prep.p)
matplot(new$x, cbind(prep.m, prep.p[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
cbind(prep.m, prep.p)
matplot(new$x, cbind(prep.m, prep.p[,-1]), # in order to avoid having two `fit` columns, we will extract the `fit` column from prep.p
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
matplot(new$x, cbind(prep.m, prep.p[,-1]), # in order to avoid having two `fit` columns, we will extract the `fit` column from prep.p
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y") # lty = line type, type = line, ylab = y axis label
matplot(new$x, cbind(prep.m, prep.p[,-1]), # in order to avoid having two `fit` columns, we will extract the `fit` column from prep.p
lty = c(1,2,2,3,3), type = "l", col = c("black", "blue", "blue", "red", "red"),ylab = "predicted y") # lty = line type, type = line, ylab = y axis label
matplot(new$x, cbind(prep.m, prep.p[,-1]), # in order to avoid having two `fit` columns, we will extract the `fit` column from prep.p
lty = c(1,2,2,3,3), type = "l", col = c("black", "blue", "blue", "red", "red"), ylab = "predicted y") # lty = line type, type = line, ylab = y axis label
# Predict mean Y given x = 50
predict(lm(y~x), newdata = data.frame(x=50), se.fit = TRUE, interval = "confidence") # predict(regression, newdata=newdata, se.fit = TRUE [bc we want to know the SE of the predicted value], interval = "confidence")
# Predict an individual Y given x = 50
predict(lm(y~x), newdata = data.frame(x=50), se.fit = TRUE, interval = "prediction")
# generate predicted y values at multiple x variables
new<-data.frame(x=seq(10,90,5)) # seq() generates numbers from 10 to 90 by increments of 5
prep.m<-predict(lm(y~x), newdata = new, interval = "confidence")
prep.m
prep.p<-predict(lm(y~x), newdata = new,  interval = "prediction")
prep.p
cbind(prep.m, prep.p)
matplot(new$x, cbind(prep.m, prep.p[,-1]), # in order to avoid having two `fit` columns, we will extract the `fit` column from prep.p
lty = c(1,2,2,3,3), type = "l", col = c("black", "blue", "blue", "red", "red"), ylab = "predicted y") # lty = line type, type = line, ylab = y axis label
knitr::opts_chunk$set(echo = TRUE)
# Here you load the necessary packages.
# Here you enter your name: Soju Hokari - It won't show in the .html file but show in the .rmd file.
```
## Instruction:
Once you have completed your answer, please submit both the knitted .html file and the .rmd file together.
### Question 1: Write your code in the code chunk and your text answer after the code chunk.
```{r}
fruitfly <- read.csv("datasets/fruitfly.csv")
summary(fruitfly)
hist(fruitfly)
hist(x = fruitfly)
hist(x = fruitfly$lifespan)
hist(fruitfly$lifespan)
ggplot2(x = fruitfly$thorax, y = fruitfly$lifespan)
# Here you load the necessary packages.
library(ggplot2)
ggplot2(x = fruitfly$thorax, y = fruitfly$lifespan)
ggplot2(x = fruitfly$thorax, y = fruitfly$lifespan)
ggplot(x = fruitfly$thorax, y = fruitfly$lifespan)
ggplot(aes(x = fruitfly$thorax, y = fruitfly$lifespan))
ggplot(fruitfly, aes(x = thorax, y = lifespan))
ggplot(fruitfly, aes(x = thorax, y = lifespan)) +
geom_point()
ggplot(fruitfly) +
geom_point(aes(x = thorax, y = lifespan))
ggplot(fruitfly) +
geom_point(aes(x = thorax, y = lifespan)) +
ylab("Lifespan (days)") +
xlab("Length of thorax (mm)")
cor(fruitfly$thorax, fruitfly$lifespan)
lm(fruitfly$thorax, fruitfly$lifespan)
lm(fruitfly$lifespan ~ fruitfly$thorax)
summary(ln)
lm <- lm(fruitfly$lifespan ~ fruitfly$thorax)
summary(lm)
summary(lm)
ggplot(fruitfly) +
geom_point(aes(x = thorax, y = lifespan)) +
ylab("Lifespan (days)") +
xlab("Length of thorax (mm)")
View(lm)
s <- summary(lm)
summary(lm)
View(s)
t_statistic <- (lm$coefficients[2] - 0) / summary(lm)$coefficients[2, 2]
summary(lm)$coefficients[2, 2]
?pt
len(fruitfly$lifespan)
length(fruitfly$lifespan)
p_value <- pt(q = t_statistic, df = length(fruitfly$lifespan) - 2, lower.tail = T)
p_value
t_statistic <- (lm$coefficients[2] - 0) / summary(lm)$coefficients[2, 2]
p_value <- 2 * pt(q = t_statistic, df = length(fruitfly$lifespan) - 2, lower.tail = T)
p_value
t_statistic
p_value
t_statistic
p_value <- 2 * pt(q = t_statistic, df = length(fruitfly$lifespan) - 5, lower.tail = T)
p_value
length(fruitfly$lifespan) - 2
p_value <- 2 * pt(q = t_statistic, df = length(fruitfly$lifespan) - 2, lower.tail = T)
p_value <- 2 * pt(q = t_statistic, df = length(fruitfly$lifespan) - 2, lower.tail = T)
p_value
p_value <- 2 * pt(t_statistic, length(fruitfly$lifespan) - 2, lower.tail = T)
p_value
t_statistic
p_value <- 2 * pt(t_statistic, (length(fruitfly$lifespan) - 2), lower.tail = T)
p_value
knitr::opts_chunk$set(echo = TRUE)
# Here you load the necessary packages.
library(tidyverse)
# Here you enter your name: Soju Hokari - It won't show in the .html file but show in the .rmd file.
fruitfly <- read.csv("datasets/fruitfly.csv")
summary(fruitfly)
hist(fruitfly$lifespan)
ggplot(fruitfly) +
geom_point(aes(x = thorax, y = lifespan)) +
ylab("Lifespan (days)") +
xlab("Length of thorax (mm)")
cor <- cor(fruitfly$thorax, fruitfly$lifespan)
lm <- lm(fruitfly$lifespan ~ fruitfly$thorax)
summary(lm)
t_statistic <- (lm$coefficients[2] - 0) / summary(lm)$coefficients[2, 2]
p_value <- 2 * pt(t_statistic, length(fruitfly$lifespan) - 2, lower.tail = T)
p_value
pt
lm$coefficients[2]
summary(lm)$coefficients[2, 2]
t_statistic <- (lm$coefficients[2] - 0) / summary(lm)$coefficients[2, 2]
t_statistic
p_value
pt(t_statistic, length(fruitfly$lifespan) - 2, lower.tail = T)
pt(t_statistic, length(fruitfly$lifespan) - 2, lower.tail = T)
p_value <- 2 * pt(t_statistic + 8, length(fruitfly$lifespan) - 2, lower.tail = T)
p_value
knitr::opts_chunk$set(echo = TRUE)
pvalue <- 2 * pt(tteststatistic, 43, lower.tail = T) # 2 * pt(t, df, [lower.tail = T -- WHY?])
tteststatistic <- (lm$coefficients[2] - 2) / 0.1074 # (beta_1_hat - beta_1) / SE_beta_1_hat
pvalue <- 2 * pt(tteststatistic, 43, lower.tail = T) # 2 * pt(t, df, [lower.tail = T -- WHY?])
pvalue
knitr::opts_chunk$set(echo = TRUE)
library(car)
library(car)
??Prestige
lm1<-lm(prestige~income, data=Prestige)
summary(lm1)
lm2<-lm(prestige~income+education, data=Prestige)
summary(lm2)
lm3<-lm(education~income, data = Prestige)
plot(lm1$residuals~lm3$residuals)
plot(lm1$residuals~lm3$residuals, ylab = "residuals of regressing income on prestige")
plot(lm1$residuals~lm3$residuals, ylab = "residuals of regressing income on prestige", xlab = "residuals of regressing education on income")
plot(lm1$residuals~lm3$residuals, ylab = "residuals of regressing income on prestige (part of prestige that is not accounted for by income)", xlab = "residuals of regressing education on income (part of income that is not accounted for by education)")
plot(lm1$residuals~lm3$residuals, ylab = "residuals of regressing income on prestige\n(part of prestige that is not accounted for by income)", xlab = "residuals of regressing education on income\n(part of income that is not accounted for by education)")
# Run a linear model to regress lm1$residuals and lm3$residals
summary(lm(lm1$residuals~lm3$residuals))
clock <- read.table("http://www.statsci.org/data/general/auction.txt",header = T)
clock <- read.table("http://www.statsci.org/data/general/auction.txt", header = T)
lm.out1 <- lm(Price~Bidders+Age, data = clock)
lm.out1$coefficients
clock$Age
lm.out1 <- lm(Price~Bidders+Age, data = clock)
lm.out1$coefficients
plot(Price~Bidders, data = clock)
clock$Age
clock$Age # We will choose age = 120, age = 150, age = 170
abline(lm.out1$coefficients[1]+120*lm.out1$coefficients[3],lm.out1$coefficients[2],col=1)
plot(Price~Bidders, data = clock)
abline(lm.out1$coefficients[1]+120*lm.out1$coefficients[3],lm.out1$coefficients[2],col=1)
plot(Price~Bidders, data = clock)
abline(lm.out1$coefficients[1]+120*lm.out1$coefficients[3],lm.out1$coefficients[2],col=1)
abline(lm.out1$coefficients[1]+150*lm.out1$coefficients[3],lm.out1$coefficients[2],col=2)
abline(lm.out1$coefficients[1]+170*lm.out1$coefficients[3],lm.out1$coefficients[2],col=4)
}
abline(lm.out1$coefficients[1] + i * lm.out1$coefficients[3], lm.out1$coefficients[2], col = 1)
for(i in c(120, 130, 140, 150, 160, 170) {
plot(Price~Bidders, data = clock)
for (i in c(120, 130, 140, 150, 160, 170)) {
abline(lm.out1$coefficients[1] + i * lm.out1$coefficients[3], lm.out1$coefficients[2], col = 1)
}
plot(Price~Bidders, data = clock)
for (i in c(120, 130, 140, 150, 160, 170)) {
abline(lm.out1$coefficients[1] + i * lm.out1$coefficients[3], lm.out1$coefficients[2], col = 1)
}
plot(Price~Bidders, data = clock)
for (i in c(120, 130, 140, 150, 160, 170)) {
abline(lm.out1$coefficients[1] + i * lm.out1$coefficients[3], lm.out1$coefficients[2], col = 1)
legend(x = 12, y = 2000, c("Age=120","Age=130","Age=140","Age=150","Age=160","Age=170"),col=c(1,2,4, 5, 6),pch=c(15,16,17, 18, 19))
}
plot(Price~Bidders, data = clock)
for (i in c(120, 130, 140, 150, 160, 170)) {
abline(lm.out1$coefficients[1] + i * lm.out1$coefficients[3], lm.out1$coefficients[2], col = 1)
legend(x = 12, y = 2000, c("Age=120","Age=130","Age=140","Age=150","Age=160","Age=170"),col=c(1,2,4, 5, 6, 7),pch=c(15,16,17, 18, 19, 20))
}
clock <- read.table("http://www.statsci.org/data/general/auction.txt", header = T)
# We can use fitted lines to show the relationship between two linear variables in 2d (instead of a plane)
# price^ = B0^ + B1^ * Bidder + B2^ * Age (fitted model)
# The above is a fitted plane. But if we fix one variable at a constant level, then we can represent it in 2D!
lm.out1 <- lm(Price~Bidders+Age, data = clock)
lm.out1$coefficients
plot(Price~Bidders, data = clock)
clock$Age # We will choose age = 120, age = 150, age = 170
plot(Price~Bidders, data = clock)
abline(lm.out1$coefficients[1] + 120 * lm.out1$coefficients[3], lm.out1$coefficients[2], col = 1)
abline(lm.out1$coefficients[1] + 150 * lm.out1$coefficients[3], lm.out1$coefficients[2], col = 2)
abline(lm.out1$coefficients[1] + 170 * lm.out1$coefficients[3], lm.out1$coefficients[2], col = 4)
legend(x=12,y=2000, c("Age=120","Age=150","Age=170"),col=c(1,2,4),pch=c(15,16,17))
plot(Price~Bidders, data = clock)
for (i in c(120, 130, 140, 150, 160, 170)) {
abline(lm.out1$coefficients[1] + i * lm.out1$coefficients[3], lm.out1$coefficients[2], col = 1)
legend(x = 12, y = 2000, c("Age=120","Age=130","Age=140","Age=150","Age=160","Age=170"),col=c(1,2,4, 5, 6, 7),pch=c(15,16,17, 18, 19, 20))
}
clock <- read.table("http://www.statsci.org/data/general/auction.txt", header = T)
# We can use fitted lines to show the relationship between two linear variables in 2d (instead of a plane)
# price^ = B0^ + B1^ * Bidder + B2^ * Age (fitted model)
# The above is a fitted plane. But if we fix one variable at a constant level, then we can represent it in 2D!
lm.out1 <- lm(Price~Bidders+Age, data = clock)
lm.out1$coefficients
plot(Price~Bidders, data = clock)
clock$Age # We will choose age = 120, age = 150, age = 170
plot(Price~Bidders, data = clock)
abline(lm.out1$coefficients[1] + 120 * lm.out1$coefficients[3], lm.out1$coefficients[2], col = 1)
abline(lm.out1$coefficients[1] + 150 * lm.out1$coefficients[3], lm.out1$coefficients[2], col = 2)
abline(lm.out1$coefficients[1] + 170 * lm.out1$coefficients[3], lm.out1$coefficients[2], col = 4)
legend(x=12,y=2000, c("Age=120","Age=150","Age=170"),col=c(1,2,4),pch=c(15,16,17))
plot(Price~Bidders, data = clock)
for (i in c(120, 130, 140, 150, 160, 170)) {
abline(lm.out1$coefficients[1] + i * lm.out1$coefficients[3], lm.out1$coefficients[2], col = 1)
}
legend(x = 12, y = 2000, c("Age=120","Age=130","Age=140","Age=150","Age=160","Age=170"),col=c(1,2,4, 5, 6, 7),pch=c(15,16,17, 18, 19, 20))
knitr::opts_chunk$set(echo = TRUE)
# Here you load the necessary packages.
# Here you enter your name: Soju Hokari - It won't show in the .html file but show in the .rmd file.
# Import the data set
advertising <- read.csv("datasets/advertising.csv")
summary(advertising)
# Get correlation matrix
cor(advertising)
# Get correlation matrix
correlation_matrix <- cor(advertising)
correlation_matrix
correlation_matrix[3, 4]
correlation_matrix[2, 5]
lm(sales~newspaper+TV, data = advertising)
regression_sales_on_newspaper_TV <- lm(sales~newspaper+TV, data = advertising)
regression_sales_on_newspaper_radio_TV <- lm(sales~newspaper+radio+TV, data = advertising)
regression_sales_on_newspaper_TV
regression_sales_on_newspaper_radio_TV
regression_sales_on_newspaper_radio_TV
regression_sales_on_newspaper_TV
regression_sales_on_newspaper_radio_TV
summary(regression_sales_on_newspaper_radio_TV)
regression_sales_on_radio_TV <- lm(sales~radio+TV, data = advertising)
regression_sales_on_radio <- lm(sales~radio, data = advertising)
plot(regression_sales_on_radio$residuals~regression_sales_on_radio_TV$residuals)
lm(regression_sales_on_radio$residuals~regression_sales_on_radio_TV$residuals)
summary(lm(regression_sales_on_radio$residuals~regression_sales_on_radio_TV$residuals))
lm_regression_residuals <- lm(regression_sales_on_radio$residuals~regression_sales_on_radio_TV$residuals)
summary(lm_regression_residuals)
lm_regression_residuals
plot(regression_sales_on_radio$residuals~regression_sales_on_radio_TV$residuals) +
abline(lm_regression_residuals$coefficients[1], lm_regression_residuals$coefficients[1])
plot(regression_sales_on_radio$residuals~regression_sales_on_radio_TV$residuals)
plot(regression_sales_on_radio$residuals~regression_sales_on_radio_TV$residuals) +
abline(lm_regression_residuals$coefficients[1], lm_regression_residuals$coefficients[2])
summary(lm_regression_residuals)
lm_regression_residuals[2]
lm_regression_residuals[2]
lm_regression_residuals$coefficients[2]
lm_regression_residuals
plot(regression_sales_on_radio$residuals~regression_sales_on_radio_TV$residuals) +
abline(lm_regression_residuals$coefficients[1], lm_regression_residuals$coefficients[2])
summary(lm_regression_residuals)
summary(regression_sales_on_radio_TV)
summary(regression_sales_on_radio_TV)
summary(regression_sales_on_radio)
summary(regression_sales_on_newspaper_TV)
summary(regression_sales_on_newspaper_radio_TV)
summary(regression_sales_on_newspaper_TV)
summary(regression_sales_on_newspaper_radio_TV)
summary(regression_sales_on_newspaper_radio_TV)
summary(lm(sales~radio+TV, data = advertising))
summary(regression_sales_on_newspaper_radio_TV)
summary(regression_sales_on_newspaper_radio_TV)
summary(lm(sales~radio+TV, data = advertising))
summary(regression_sales_on_radio_TV)
a <- summary(regression_sales_on_radio_TV)
summary(regression_sales_on_radio_TV)
regression_sales_on_radio_TV$coefficients[2]
summary(regression_sales_on_radio_TV)
regression_sales_on_radio_TV_TVradio <- lm(sales~radio+TV+TV:radio)
regression_sales_on_radio_TV_TVradio <- lm(sales~radio+TV+TV:radio, data = advertising)
summary(regression_sales_on_radio_TV_TVradio)
anova(regression_sales_on_radio_TV, regression_sales_on_radio_TV_TVradio)
anova <- anova(regression_sales_on_radio_TV, regression_sales_on_radio_TV_TVradio)
anova
anova$Pr(>F)[2]
anova[["Pr(>F)"]][2]
